{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { isArray } from 'util';\nimport { getFilms, getGenres } from './api';\n\nconst useAppData = () => {\n  _s();\n\n  const [films, setFilms] = useState();\n  const [genres, setGenres] = useState([]);\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = ids => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = sortValue => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = page => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page\n  }) => {\n    const queryParams = [{\n      name: 'with_genres',\n      value: genresIds !== null && genresIds !== void 0 ? genresIds : ''\n    }, {\n      name: 'sort_by',\n      value: sortValue !== null && sortValue !== void 0 ? sortValue : ''\n    }, {\n      name: 'page',\n      value: page !== null && page !== void 0 ? page : ''\n    }];\n\n    const a = () => {\n      const queryParamsString = queryParams.map(({\n        name,\n        value\n      }) => {\n        if (isArray(value)) {\n          return `${name}=${value.join(',')}`;\n        }\n\n        console.log(name);\n        return `${name}=${value}`;\n      });\n      console.log(queryParamsString);\n      getFilms(queryParamsString === null || queryParamsString === void 0 ? void 0 : queryParamsString.join('&'), setFilms);\n    };\n\n    a();\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch\n  };\n};\n\n_s(useAppData, \"pQDUtH9zp+OV3+G6JJrbAoZxlPg=\");\n\nexport { useAppData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/app.hook.ts"],"names":["React","useState","isArray","getFilms","getGenres","useAppData","films","setFilms","genres","setGenres","useEffect","handleSelectOption","ids","convertedIds","join","handleSort","sortValue","handlePagination","page","Math","ceil","handleSearch","genresIds","queryParams","name","value","a","queryParamsString","map","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAIA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAc,EAAd,CAApC;AAEAD,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpBP,IAAAA,QAAQ,CAAC,EAAD,EAAKI,QAAL,CAAR;AACD,GAFD,EAEG,EAFH;AAIAP,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpBN,IAAAA,SAAS,CAAC,EAAD,EAAKK,SAAL,CAAT;AACD,GAFD,EAEG,EAFH;;AAIA,QAAME,kBAAkB,GAAIC,GAAD,IAAmB;AAC5C,UAAMC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAAS,GAAT,CAArB;AACAX,IAAAA,QAAQ,CAAE,gBAAeU,YAAa,EAA9B,EAAiCN,QAAjC,CAAR;AACD,GAHD;;AAKA,QAAMQ,UAAU,GAAIC,SAAD,IAAyB;AAC1Cb,IAAAA,QAAQ,CAAE,YAAWa,SAAU,EAAvB,EAA0BT,QAA1B,CAAR;AACD,GAFD;;AAIA,QAAMU,gBAAgB,GAAIC,IAAD,IAAkB;AACzCf,IAAAA,QAAQ,CAAE,SAAQgB,IAAI,CAACC,IAAL,CAAUF,IAAI,GAAG,CAAjB,CAAoB,EAA9B,EAAiCX,QAAjC,CAAR;AACD,GAFD;;AAIA,QAAMc,YAAY,GAAG,CAAC;AACpBC,IAAAA,SADoB;AAEpBN,IAAAA,SAFoB;AAGpBE,IAAAA;AAHoB,GAAD,KAIQ;AAC3B,UAAMK,WAAW,GAAG,CAClB;AAAEC,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAEH,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe;AAA3C,KADkB,EAElB;AAAEE,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,KAAK,EAAET,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe;AAAvC,KAFkB,EAGlB;AAAEQ,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAEP,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAU;AAA/B,KAHkB,CAApB;;AAMA,UAAMQ,CAAC,GAAG,MAAM;AACd,YAAMC,iBAAiB,GAAGJ,WAAW,CAACK,GAAZ,CAAgB,CAAC;AAAEJ,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,KAAqB;AAC7D,YAAIvB,OAAO,CAACuB,KAAD,CAAX,EAAoB;AAClB,iBAAQ,GAAED,IAAK,IAAGC,KAAK,CAACX,IAAN,CAAW,GAAX,CAAgB,EAAlC;AACD;;AAEDe,QAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,eAAQ,GAAEA,IAAK,IAAGC,KAAM,EAAxB;AACD,OAPyB,CAA1B;AASAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,iBAAZ;AACAxB,MAAAA,QAAQ,CAACwB,iBAAD,aAACA,iBAAD,uBAACA,iBAAiB,CAAEb,IAAnB,CAAwB,GAAxB,CAAD,EAA+BP,QAA/B,CAAR;AACD,KAZD;;AAcAmB,IAAAA,CAAC;AACF,GA1BD;;AA4BA,SAAO;AACLpB,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,MAHK;AAILC,IAAAA,SAJK;AAKLE,IAAAA,kBALK;AAMLI,IAAAA,UANK;AAOLE,IAAAA,gBAPK;AAQLI,IAAAA;AARK,GAAP;AAUD,CA/DD;;GAAMhB,U;;AAiEN,SAASA,UAAT","sourcesContent":["import React, { useState } from 'react';\nimport { isArray } from 'util';\nimport { getFilms, getGenres } from './api';\nimport { SortList } from './app.enums';\nimport { FilmsResponse, GenresState, HandleSearchPropsType } from './app.types';\n\nconst useAppData = () => {\n  const [films, setFilms] = useState<FilmsResponse>();\n  const [genres, setGenres] = useState<GenresState>([]);\n\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = (ids: number[]) => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = (sortValue: SortList) => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = (page: number) => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n  }: HandleSearchPropsType) => {\n    const queryParams = [\n      { name: 'with_genres', value: genresIds ?? '' },\n      { name: 'sort_by', value: sortValue ?? '' },\n      { name: 'page', value: page ?? '' },\n    ];\n\n    const a = () => {\n      const queryParamsString = queryParams.map(({ name, value }) => {\n        if (isArray(value)) {\n          return `${name}=${value.join(',')}`;\n        }\n\n        console.log(name);\n        return `${name}=${value}`;\n      });\n\n      console.log(queryParamsString);\n      getFilms(queryParamsString?.join('&'), setFilms);\n    };\n\n    a();\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n  };\n};\n\nexport { useAppData };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { isArray } from 'util';\nimport { getFilms, getGenres } from './api';\n\nconst useAppData = () => {\n  _s();\n\n  const [films, setFilms] = useState();\n  const [genres, setGenres] = useState([]);\n  const [queryParams, setQueryParams] = useState([{\n    name: 'with_genres',\n    value: [''],\n    propName: 'withGenres'\n  }, {\n    name: 'sort_by',\n    value: '',\n    propName: 'sortBy'\n  }, {\n    name: 'page',\n    value: '',\n    propName: 'page'\n  }]);\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = ids => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = sortValue => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = page => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page\n  }) => {\n    setQueryParams(queryParams.map(query => {\n      if (query.propName === 'genresIds') {\n        return { ...query\n        };\n      }\n\n      return '';\n    }));\n    const queryParamsString = queryParams.map(({\n      name,\n      value\n    }) => {\n      if (isArray(value)) {\n        return `${name}=${value.join(',')}`;\n      }\n\n      console.log(name);\n      return `${name}=${value}`;\n    });\n    console.log(queryParamsString);\n    getFilms(queryParamsString === null || queryParamsString === void 0 ? void 0 : queryParamsString.join('&'), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch\n  };\n};\n\n_s(useAppData, \"GzPVifW4CWdnkVKfRCcbdR+xmLw=\");\n\nexport { useAppData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/app.hook.ts"],"names":["React","useState","isArray","getFilms","getGenres","useAppData","films","setFilms","genres","setGenres","queryParams","setQueryParams","name","value","propName","useEffect","handleSelectOption","ids","convertedIds","join","handleSort","sortValue","handlePagination","page","Math","ceil","handleSearch","genresIds","map","query","queryParamsString","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAIA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAc,EAAd,CAApC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAC/C;AAAEW,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,KAAK,EAAE,CAAC,EAAD,CAA9B;AAAoCC,IAAAA,QAAQ,EAAE;AAA9C,GAD+C,EAE/C;AAAEF,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,KAAK,EAAE,EAA1B;AAA8BC,IAAAA,QAAQ,EAAE;AAAxC,GAF+C,EAG/C;AAAEF,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE,EAAvB;AAA2BC,IAAAA,QAAQ,EAAE;AAArC,GAH+C,CAAD,CAA9C;AAKAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpBZ,IAAAA,QAAQ,CAAC,EAAD,EAAKI,QAAL,CAAR;AACD,GAFD,EAEG,EAFH;AAIAP,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpBX,IAAAA,SAAS,CAAC,EAAD,EAAKK,SAAL,CAAT;AACD,GAFD,EAEG,EAFH;;AAIA,QAAMO,kBAAkB,GAAIC,GAAD,IAAmB;AAC5C,UAAMC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAAS,GAAT,CAArB;AACAhB,IAAAA,QAAQ,CAAE,gBAAee,YAAa,EAA9B,EAAiCX,QAAjC,CAAR;AACD,GAHD;;AAKA,QAAMa,UAAU,GAAIC,SAAD,IAAyB;AAC1ClB,IAAAA,QAAQ,CAAE,YAAWkB,SAAU,EAAvB,EAA0Bd,QAA1B,CAAR;AACD,GAFD;;AAIA,QAAMe,gBAAgB,GAAIC,IAAD,IAAkB;AACzCpB,IAAAA,QAAQ,CAAE,SAAQqB,IAAI,CAACC,IAAL,CAAUF,IAAI,GAAG,CAAjB,CAAoB,EAA9B,EAAiChB,QAAjC,CAAR;AACD,GAFD;;AAIA,QAAMmB,YAAY,GAAG,CAAC;AACpBC,IAAAA,SADoB;AAEpBN,IAAAA,SAFoB;AAGpBE,IAAAA;AAHoB,GAAD,KAIQ;AAC3BZ,IAAAA,cAAc,CAACD,WAAW,CAACkB,GAAZ,CAAiBC,KAAD,IAAW;AACxC,UAAIA,KAAK,CAACf,QAAN,KAAmB,WAAvB,EAAoC;AAClC,eAAQ,EAAC,GAAGe;AAAJ,SAAR;AACD;;AAED,aAAO,EAAP;AACD,KANc,CAAD,CAAd;AAOE,UAAMC,iBAAiB,GAAGpB,WAAW,CAACkB,GAAZ,CAAgB,CAAC;AAAEhB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAAqB;AAC7D,UAAIX,OAAO,CAACW,KAAD,CAAX,EAAoB;AAClB,eAAQ,GAAED,IAAK,IAAGC,KAAK,CAACM,IAAN,CAAW,GAAX,CAAgB,EAAlC;AACD;;AAEDY,MAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAZ;AACA,aAAQ,GAAEA,IAAK,IAAGC,KAAM,EAAxB;AACD,KAPyB,CAA1B;AASAkB,IAAAA,OAAO,CAACC,GAAR,CAAYF,iBAAZ;AACA3B,IAAAA,QAAQ,CAAC2B,iBAAD,aAACA,iBAAD,uBAACA,iBAAiB,CAAEX,IAAnB,CAAwB,GAAxB,CAAD,EAA+BZ,QAA/B,CAAR;AACH,GAvBD;;AAyBA,SAAO;AACLD,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,MAHK;AAILC,IAAAA,SAJK;AAKLO,IAAAA,kBALK;AAMLI,IAAAA,UANK;AAOLE,IAAAA,gBAPK;AAQLI,IAAAA;AARK,GAAP;AAUD,CAhED;;GAAMrB,U;;AAkEN,SAASA,UAAT","sourcesContent":["import React, { useState } from 'react';\nimport { isArray } from 'util';\nimport { getFilms, getGenres } from './api';\nimport { SortList } from './app.enums';\nimport { FilmsResponse, GenresState, HandleSearchPropsType } from './app.types';\n\nconst useAppData = () => {\n  const [films, setFilms] = useState<FilmsResponse>();\n  const [genres, setGenres] = useState<GenresState>([]);\n  const [queryParams, setQueryParams] = useState([\n  { name: 'with_genres', value: [''], propName: 'withGenres' },\n  { name: 'sort_by', value: '', propName: 'sortBy' },\n  { name: 'page', value: '', propName: 'page' },\n])\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = (ids: number[]) => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = (sortValue: SortList) => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = (page: number) => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n  }: HandleSearchPropsType) => {\n    setQueryParams(queryParams.map((query) => {\n      if (query.propName === 'genresIds') {\n        return ({...query })\n      }\n\n      return ''\n    }))\n      const queryParamsString = queryParams.map(({ name, value }) => {\n        if (isArray(value)) {\n          return `${name}=${value.join(',')}`;\n        }\n\n        console.log(name);\n        return `${name}=${value}`;\n      });\n\n      console.log(queryParamsString);\n      getFilms(queryParamsString?.join('&'), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n  };\n};\n\nexport { useAppData };\n"]},"metadata":{},"sourceType":"module"}
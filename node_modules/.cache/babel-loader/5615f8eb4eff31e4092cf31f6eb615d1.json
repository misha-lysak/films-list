{"ast":null,"code":"var _jsxFileName = \"/home/misha/projects/films-list/src/components/select/select.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { getGenres } from '../../api';\nimport './select.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Select = ({\n  handleSelectOption\n}) => {\n  _s();\n\n  var _selectedOptions$;\n\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const color = useMemo(() => Math.floor(Math.random() * 16777215).toString(16), [selectedOptions]);\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n  React.useEffect(() => {\n    getGenres('', setOptions);\n  }, []);\n  console.log({\n    options\n  });\n  console.log({\n    selectedOptions\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selectWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select\",\n      children: [(selectedOptions === null || selectedOptions === void 0 ? void 0 : (_selectedOptions$ = selectedOptions[0]) === null || _selectedOptions$ === void 0 ? void 0 : _selectedOptions$.id) ? selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.map(({\n        id,\n        name\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: `#${color}49`\n          },\n          className: \"chosenOptionsWrapper\",\n          onClick: () => {\n            handleOpenSelect();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chosenOptionName\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deleteChosenOption\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"emptyValue\",\n        children: \"Choose some category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggleOpenSelect\",\n        onClick: () => handleOpenSelect(),\n        children: \"\\u27BE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), isOpenSelect && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"optionsWrapper\",\n      children: options === null || options === void 0 ? void 0 : options.filter(option => !(selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.some(sOption => sOption.id === option.id))).map(({\n        id,\n        name\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleSelectOption(id);\n          setSelectedOptions(prev => [...prev, {\n            id,\n            name\n          }]);\n        },\n        className: \"option\",\n        children: name\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Select, \"0lyizd36hBXQU6U0kJyxp2JvgIE=\");\n\n_c = Select;\nexport const MemoSelect = /*#__PURE__*/React.memo(Select);\n_c2 = MemoSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Select\");\n$RefreshReg$(_c2, \"MemoSelect\");","map":{"version":3,"sources":["/home/misha/projects/films-list/src/components/select/select.tsx"],"names":["React","useCallback","useMemo","useState","getGenres","Select","handleSelectOption","isOpenSelect","setIsOpenSelect","selectedOptions","setSelectedOptions","options","setOptions","color","Math","floor","random","toString","handleOpenSelect","useEffect","console","log","id","map","name","backgroundColor","filter","option","some","sOption","prev","MemoSelect","memo"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { getGenres } from '../../api';\nimport './select.scss';\nimport { SelectProps } from './select.types';\n\nconst Select: FC<SelectProps> = ({ handleSelectOption }) => {\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState<\n    { id: number; name: string }[]\n  >([]);\n  const [options, setOptions] = useState<{ id: number; name: string }[]>([]);\n  const color = useMemo(\n    () => Math.floor(Math.random() * 16777215).toString(16),\n    [selectedOptions]\n  );\n\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n\n  React.useEffect(() => {\n    getGenres('', setOptions);\n  }, []);\n\n  console.log({ options });\n  console.log({ selectedOptions });\n\n  return (\n    <div className=\"selectWrapper\">\n      <div className=\"select\">\n        {selectedOptions?.[0]?.id ? (\n          selectedOptions?.map(({ id, name }) => {\n            return (\n              <div\n                key={id}\n                style={{ backgroundColor: `#${color}49` }}\n                className=\"chosenOptionsWrapper\"\n                onClick={() => {\n                  handleOpenSelect();\n                }}\n              >\n                <span className=\"chosenOptionName\">{name}</span>\n                <div className=\"deleteChosenOption\">+</div>\n              </div>\n            );\n          })\n        ) : (\n          <p className=\"emptyValue\">Choose some category</p>\n        )}\n        <div className=\"toggleOpenSelect\" onClick={() => handleOpenSelect()}>\n          &#x27BE;\n        </div>\n      </div>\n      {isOpenSelect && (\n        <div className=\"optionsWrapper\">\n          {/* <div onClick={() => handleOpenSelect()} className=\"option\">\n            option\n          </div> */}\n          {options?.filter((option => !selectedOptions?.some(sOption => sOption.id === option.id))).map(({ id, name }) => (\n            <div\n              key={id}\n              onClick={() => {\n                handleSelectOption(id);\n                setSelectedOptions((prev: { id: number; name: string }[]) => [\n                  ...prev,\n                  { id, name },\n                ]);\n              }}\n              className=\"option\"\n            >\n              {name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const MemoSelect = React.memo(Select);\n"]},"metadata":{},"sourceType":"module"}
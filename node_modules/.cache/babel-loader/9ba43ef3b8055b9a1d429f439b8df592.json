{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { getFilms, getGenres } from '../../api';\n\nconst useHomeData = () => {\n  _s();\n\n  const [isFirstDicker, setIsFirstDicker] = useState(true);\n  const [films, setFilms] = useState();\n  const [genres, setGenres] = useState([]);\n  const [queryParams, setQueryParams] = useState({\n    with_genres: '',\n    sort_by: '',\n    page: 1\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = ids => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = sortValue => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = page => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n    isFetch = true\n  }) => {\n    const i = page && (page % 2 === 0 || page - 1 === queryParams.page);\n    setIsFirstDicker(!!i);\n    const searchValues = { ...queryParams,\n      with_genres: (genresIds === null || genresIds === void 0 ? void 0 : genresIds.join(',')) || queryParams.with_genres,\n      sort_by: sortValue !== null && sortValue !== void 0 ? sortValue : queryParams.sort_by,\n      page: Math.ceil((page !== null && page !== void 0 ? page : queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) / 2)\n    };\n    setQueryParams(searchValues);\n    const queryParamsString = Object.entries(searchValues).map(query => {\n      return `&${query[0]}=${query[1]}`;\n    });\n\n    if (isFetch) {\n      getFilms(queryParamsString === null || queryParamsString === void 0 ? void 0 : queryParamsString.join(''), setFilms);\n    }\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n    isFirstDicker\n  };\n};\n\n_s(useHomeData, \"TNFyUrWZtCxrhLJ39JqQdnCAczQ=\");\n\nexport { useHomeData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/pages/home/home.hook.ts"],"names":["React","useState","getFilms","getGenres","useHomeData","isFirstDicker","setIsFirstDicker","films","setFilms","genres","setGenres","queryParams","setQueryParams","with_genres","sort_by","page","useEffect","handleSelectOption","ids","convertedIds","join","handleSort","sortValue","handlePagination","Math","ceil","handleSearch","genresIds","isFetch","i","searchValues","queryParamsString","Object","entries","map","query"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { getFilms, getGenres } from '../../api';\nimport {\n  FilmsResponse,\n  GenresState,\n  HandleSearchPropsType,\n  SortList,\n} from '../../types';\n\nconst useHomeData = () => {\n  const [isFirstDicker, setIsFirstDicker] = useState(true);\n  const [films, setFilms] = useState<FilmsResponse>();\n  const [genres, setGenres] = useState<GenresState>([]);\n  const [queryParams, setQueryParams] = useState<{\n    [key: string]: string | number;\n    page: number;\n  }>({\n    with_genres: '',\n    sort_by: '',\n    page: 1,\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = (ids: number[]) => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = (sortValue: SortList) => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = (page: number) => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n    isFetch = true,\n  }: HandleSearchPropsType) => {\n    const i = page && (page % 2 === 0 || page - 1 === queryParams.page);\n    setIsFirstDicker(!!i);\n\n    const searchValues = {\n      ...queryParams,\n      with_genres: genresIds?.join(',') || queryParams.with_genres,\n      sort_by: sortValue ?? queryParams.sort_by,\n      page: Math.ceil((page ?? queryParams?.page) / 2),\n    };\n\n    setQueryParams(searchValues);\n\n    const queryParamsString = Object.entries(searchValues).map((query) => {\n      return `&${query[0]}=${query[1]}`;\n    });\n\n    if (isFetch) {\n      getFilms(queryParamsString?.join(''), setFilms);\n    }\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n    isFirstDicker,\n  };\n};\n\nexport { useHomeData };\n"]},"metadata":{},"sourceType":"module"}
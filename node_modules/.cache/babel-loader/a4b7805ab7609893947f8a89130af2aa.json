{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { isArray } from 'util';\nimport { getFilms, getGenres } from './api';\n\nconst useAppData = () => {\n  _s();\n\n  const [films, setFilms] = useState();\n  const [genres, setGenres] = useState([]);\n  const [queryParams, setQueryParams] = useState({\n    genresIds: '',\n    sortValue: '',\n    page: ''\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = ids => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = sortValue => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = page => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page\n  }) => {\n    setQueryParams({ ...queryParams,\n      genresIds: genresIds === null || genresIds === void 0 ? void 0 : genresIds.join(','),\n      sortValue: sortValue !== null && sortValue !== void 0 ? sortValue : queryParams.sortValue,\n      page: page !== null && page !== void 0 ? page : queryParams.page\n    });\n    const queryParamsString = queryParams.map(({\n      name,\n      value\n    }) => {\n      if (isArray(value)) {\n        return `${name}=${value.join(',')}`;\n      }\n\n      console.log(name);\n      return `${name}=${value}`;\n    });\n    console.log(queryParamsString);\n    getFilms(queryParamsString === null || queryParamsString === void 0 ? void 0 : queryParamsString.join('&'), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch\n  };\n};\n\n_s(useAppData, \"2zhEvSi/CzL8BJJt3/x1ZuQMYXY=\");\n\nexport { useAppData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/app.hook.ts"],"names":["React","useState","isArray","getFilms","getGenres","useAppData","films","setFilms","genres","setGenres","queryParams","setQueryParams","genresIds","sortValue","page","useEffect","handleSelectOption","ids","convertedIds","join","handleSort","handlePagination","Math","ceil","handleSearch","queryParamsString","map","name","value","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { isArray } from 'util';\nimport { getFilms, getGenres } from './api';\nimport { SortList } from './app.enums';\nimport { FilmsResponse, GenresState, HandleSearchPropsType } from './app.types';\n\nconst useAppData = () => {\n  const [films, setFilms] = useState<FilmsResponse>();\n  const [genres, setGenres] = useState<GenresState>([]);\n  const [queryParams, setQueryParams] = useState<{[key: string]: string | number}>({\n    genresIds: '',\n    sortValue: '',\n    page: '',\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = (ids: number[]) => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = (sortValue: SortList) => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = (page: number) => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n  }: HandleSearchPropsType) => {\n    setQueryParams({...queryParams, genresIds: genresIds?.join(','), sortValue: sortValue ?? queryParams.sortValue, page: page ?? queryParams.page});\n    const queryParamsString = queryParams.map(({ name, value }) => {\n      if (isArray(value)) {\n        return `${name}=${value.join(',')}`;\n      }\n\n      console.log(name);\n      return `${name}=${value}`;\n    });\n\n    console.log(queryParamsString);\n    getFilms(queryParamsString?.join('&'), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n  };\n};\n\nexport { useAppData };\n"]},"metadata":{},"sourceType":"module"}
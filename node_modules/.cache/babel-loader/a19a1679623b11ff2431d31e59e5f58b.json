{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { getFilms, getGenres } from '../../api';\n\nconst useHomeData = () => {\n  _s();\n\n  const [films, setFilms] = useState();\n  const [genres, setGenres] = useState([]);\n  const [queryParams, setQueryParams] = useState({\n    with_genres: '',\n    sort_by: '',\n    page: null\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = ids => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = sortValue => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = page => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page\n  }) => {\n    var _Math$ceil;\n\n    const searchValues = { ...queryParams,\n      with_genres: (genresIds === null || genresIds === void 0 ? void 0 : genresIds.join(',')) || queryParams.with_genres,\n      sort_by: sortValue !== null && sortValue !== void 0 ? sortValue : queryParams.sort_by,\n      page: (_Math$ceil = Math.ceil(page / 2)) !== null && _Math$ceil !== void 0 ? _Math$ceil : Math.ceil(Number(queryParams === null || queryParams === void 0 ? void 0 : queryParams.page) / 2)\n    };\n    setQueryParams(searchValues);\n    const queryParamsString = Object.entries(searchValues).map(query => {\n      return `&${query[0]}=${query[1]}`;\n    });\n    getFilms(queryParamsString === null || queryParamsString === void 0 ? void 0 : queryParamsString.join(''), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch\n  };\n};\n\n_s(useHomeData, \"Oqc2L9H/nidaXQF6/DzIK9078ow=\");\n\nexport { useHomeData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/pages/home/home.hook.ts"],"names":["React","useState","getFilms","getGenres","useHomeData","films","setFilms","genres","setGenres","queryParams","setQueryParams","with_genres","sort_by","page","useEffect","handleSelectOption","ids","convertedIds","join","handleSort","sortValue","handlePagination","Math","ceil","handleSearch","genresIds","searchValues","Number","queryParamsString","Object","entries","map","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,WAApC;;AAQA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAc,EAAd,CAApC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAE3C;AACDU,IAAAA,WAAW,EAAE,EADZ;AAEDC,IAAAA,OAAO,EAAE,EAFR;AAGDC,IAAAA,IAAI,EAAE;AAHL,GAF2C,CAA9C;AAOAb,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBZ,IAAAA,QAAQ,CAAC,EAAD,EAAKI,QAAL,CAAR;AACD,GAFD,EAEG,EAFH;AAIAN,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBX,IAAAA,SAAS,CAAC,EAAD,EAAKK,SAAL,CAAT;AACD,GAFD,EAEG,EAFH;;AAIA,QAAMO,kBAAkB,GAAIC,GAAD,IAAmB;AAC5C,UAAMC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAAS,GAAT,CAArB;AACAhB,IAAAA,QAAQ,CAAE,gBAAee,YAAa,EAA9B,EAAiCX,QAAjC,CAAR;AACD,GAHD;;AAKA,QAAMa,UAAU,GAAIC,SAAD,IAAyB;AAC1ClB,IAAAA,QAAQ,CAAE,YAAWkB,SAAU,EAAvB,EAA0Bd,QAA1B,CAAR;AACD,GAFD;;AAIA,QAAMe,gBAAgB,GAAIR,IAAD,IAAkB;AACzCX,IAAAA,QAAQ,CAAE,SAAQoB,IAAI,CAACC,IAAL,CAAUV,IAAI,GAAG,CAAjB,CAAoB,EAA9B,EAAiCP,QAAjC,CAAR;AACD,GAFD;;AAIA,QAAMkB,YAAY,GAAG,CAAC;AACpBC,IAAAA,SADoB;AAEpBL,IAAAA,SAFoB;AAGpBP,IAAAA;AAHoB,GAAD,KAIQ;AAAA;;AAC3B,UAAMa,YAAY,GAAG,EACnB,GAAGjB,WADgB;AAEnBE,MAAAA,WAAW,EAAE,CAAAc,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEP,IAAX,CAAgB,GAAhB,MAAwBT,WAAW,CAACE,WAF9B;AAGnBC,MAAAA,OAAO,EAAEQ,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeX,WAAW,CAACG,OAHf;AAInBC,MAAAA,IAAI,gBAAES,IAAI,CAACC,IAAL,CAAUV,IAAI,GAAG,CAAjB,CAAF,mDAAyBS,IAAI,CAACC,IAAL,CAAUI,MAAM,CAAClB,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEI,IAAd,CAAN,GAA4B,CAAtC;AAJV,KAArB;AAOAH,IAAAA,cAAc,CAACgB,YAAD,CAAd;AAEA,UAAME,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeJ,YAAf,EAA6BK,GAA7B,CAAkCC,KAAD,IAAW;AACpE,aAAQ,IAAGA,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAAhC;AACD,KAFyB,CAA1B;AAIA9B,IAAAA,QAAQ,CAAC0B,iBAAD,aAACA,iBAAD,uBAACA,iBAAiB,CAAEV,IAAnB,CAAwB,EAAxB,CAAD,EAA8BZ,QAA9B,CAAR;AACD,GAnBD;;AAqBA,SAAO;AACLD,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,MAHK;AAILC,IAAAA,SAJK;AAKLO,IAAAA,kBALK;AAMLI,IAAAA,UANK;AAOLE,IAAAA,gBAPK;AAQLG,IAAAA;AARK,GAAP;AAUD,CA9DD;;GAAMpB,W;;AAgEN,SAASA,WAAT","sourcesContent":["import React, { useState } from 'react';\nimport { getFilms, getGenres } from '../../api';\nimport {\n  FilmsResponse,\n  GenresState,\n  HandleSearchPropsType,\n  SortList,\n} from '../../types';\n\nconst useHomeData = () => {\n  const [films, setFilms] = useState<FilmsResponse>();\n  const [genres, setGenres] = useState<GenresState>([]);\n  const [queryParams, setQueryParams] = useState<{\n    [key: string]: string | number; page: number | null\n  }>({\n    with_genres: '',\n    sort_by: '',\n    page: null,\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = (ids: number[]) => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = (sortValue: SortList) => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = (page: number) => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n  }: HandleSearchPropsType) => {\n    const searchValues = {\n      ...queryParams,\n      with_genres: genresIds?.join(',') || queryParams.with_genres,\n      sort_by: sortValue ?? queryParams.sort_by,\n      page: Math.ceil(page / 2) ?? Math.ceil(Number(queryParams?.page) / 2),\n    };\n\n    setQueryParams(searchValues);\n\n    const queryParamsString = Object.entries(searchValues).map((query) => {\n      return `&${query[0]}=${query[1]}`;\n    });\n\n    getFilms(queryParamsString?.join(''), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n  };\n};\n\nexport { useHomeData };\n"]},"metadata":{},"sourceType":"module"}
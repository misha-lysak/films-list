{"ast":null,"code":"var _jsxFileName = \"/home/misha/projects/films-list/src/components/select/select.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport './select.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Select = ({\n  handleSelectOption,\n  options\n}) => {\n  _s();\n\n  var _selectedOptions$;\n\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectOptions] = useState([]);\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n\n  const handleRemoveSelectedOption = id => {\n    const filteredSelectedOptions = selectedOptions.filter(option => option.id !== id);\n    setSelectOptions(filteredSelectedOptions);\n    handleSelectOption(filteredSelectedOptions.map(option => option.id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selectWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select\",\n      children: [(selectedOptions === null || selectedOptions === void 0 ? void 0 : (_selectedOptions$ = selectedOptions[0]) === null || _selectedOptions$ === void 0 ? void 0 : _selectedOptions$.id) ? selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.map(({\n        id,\n        name\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chosenOptionsWrapper\",\n        onClick: () => handleRemoveSelectedOption(id),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chosenOptionName\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deleteChosenOption\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"emptyValue\",\n        children: \"Choose some category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggleOpenSelect\",\n        onClick: () => handleOpenSelect(),\n        children: \"\\u27BE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), isOpenSelect && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"optionsWrapper\",\n      children: options.filter(option => !(selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.some(sOption => sOption.id === option.id))).map(({\n        id,\n        name\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleSelectOption([...selectedOptions.map(sOption => sOption.id), id]);\n          setSelectOptions(prev => [...prev, {\n            id,\n            name\n          }]);\n          handleOpenSelect();\n        },\n        className: \"option\",\n        children: name\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Select, \"tx7UHMseKnop7sTzYusPDv/WOM4=\");\n\n_c = Select;\nexport const MemoSelect = /*#__PURE__*/React.memo(Select);\n_c2 = MemoSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Select\");\n$RefreshReg$(_c2, \"MemoSelect\");","map":{"version":3,"sources":["/home/misha/projects/films-list/src/components/select/select.tsx"],"names":["React","useCallback","useState","Select","handleSelectOption","options","isOpenSelect","setIsOpenSelect","selectedOptions","setSelectOptions","handleOpenSelect","handleRemoveSelectedOption","id","filteredSelectedOptions","filter","option","map","name","some","sOption","prev","MemoSelect","memo"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useState } from 'react';\nimport { GenresState } from '../../app.types';\nimport './select.scss';\nimport { SelectProps } from './select.types';\n\nconst Select: FC<SelectProps> = ({ handleSelectOption, options }) => {\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectOptions] = useState<GenresState>([]);\n\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n\n  const handleRemoveSelectedOption = (id: number) => {\n    const filteredSelectedOptions = selectedOptions.filter((option) => option.id !== id);\n    setSelectOptions(filteredSelectedOptions);\n    handleSelectOption(filteredSelectedOptions.map((option) => option.id));\n  };\n\n  return (\n    <div className=\"selectWrapper\">\n      <div className=\"select\">\n        {selectedOptions?.[0]?.id ? (\n          selectedOptions?.map(({ id, name }) => (\n            <div\n              key={id}\n              className=\"chosenOptionsWrapper\"\n              onClick={() => handleRemoveSelectedOption(id)}\n            >\n              <span className=\"chosenOptionName\">{name}</span>\n              <div className=\"deleteChosenOption\">+</div>\n            </div>\n          ))\n        ) : (\n          <p className=\"emptyValue\">Choose some category</p>\n        )}\n        <div className=\"toggleOpenSelect\" onClick={() => handleOpenSelect()}>\n          &#x27BE;\n        </div>\n      </div>\n      {isOpenSelect && (\n        <div className=\"optionsWrapper\">\n          {options.filter((option) => !selectedOptions?.some((sOption) => sOption.id === option.id))\n            .map(({ id, name }) => (\n              <div\n                key={id}\n                onClick={() => {\n                  handleSelectOption([...selectedOptions.map((sOption) => sOption.id), id]);\n                  setSelectOptions((prev: { id: number; name: string }[]) => [\n                    ...prev,\n                    { id, name },\n                  ]);\n                  handleOpenSelect();\n                }}\n                className=\"option\"\n              >\n                {name}\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const MemoSelect = React.memo(Select);\n"]},"metadata":{},"sourceType":"module"}
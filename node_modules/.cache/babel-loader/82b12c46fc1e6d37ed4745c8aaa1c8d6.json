{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nconst useSelectData = handleSelectOption => {\n  _s();\n\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectOptions] = useState([]);\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n\n  const handleRemoveSelectedOption = id => {\n    const filteredSelectedOptions = selectedOptions.filter(option => option.id !== id);\n    setSelectOptions(filteredSelectedOptions);\n    handleSelectOption(filteredSelectedOptions.map(option => option.id));\n  };\n\n  return {\n    isOpenSelect,\n    selectedOptions,\n    handleOpenSelect,\n    handleRemoveSelectedOption\n  };\n};\n\n_s(useSelectData, \"tx7UHMseKnop7sTzYusPDv/WOM4=\");\n\nexport { useSelectData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/components/select/select.hook.ts"],"names":["useState","useCallback","useSelectData","handleSelectOption","isOpenSelect","setIsOpenSelect","selectedOptions","setSelectOptions","handleOpenSelect","handleRemoveSelectedOption","id","filteredSelectedOptions","filter","option","map"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAGA,MAAMC,aAAa,GAAIC,kBAAD,IAAkD;AAAA;;AACtE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACM,eAAD,EAAkBC,gBAAlB,IAAsCP,QAAQ,CAAc,EAAd,CAApD;AAEA,QAAMQ,gBAAgB,GAAGP,WAAW,CAAC,MAAM;AACzCI,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFmC,EAEjC,CAACA,YAAD,CAFiC,CAApC;;AAIA,QAAMK,0BAA0B,GAAIC,EAAD,IAAgB;AACjD,UAAMC,uBAAuB,GAAGL,eAAe,CAACM,MAAhB,CAC7BC,MAAD,IAAYA,MAAM,CAACH,EAAP,KAAcA,EADI,CAAhC;AAGAH,IAAAA,gBAAgB,CAACI,uBAAD,CAAhB;AACAR,IAAAA,kBAAkB,CAACQ,uBAAuB,CAACG,GAAxB,CAA6BD,MAAD,IAAYA,MAAM,CAACH,EAA/C,CAAD,CAAlB;AACD,GAND;;AAQA,SAAO;AACLN,IAAAA,YADK;AAELE,IAAAA,eAFK;AAGLE,IAAAA,gBAHK;AAILC,IAAAA;AAJK,GAAP;AAMD,CAtBD;;GAAMP,a;;AAwBN,SAASA,aAAT","sourcesContent":["import { useState, useCallback } from 'react';\nimport { GenresState } from '../../app.types';\n\nconst useSelectData = (handleSelectOption: ((id: number[]) => void)) => {\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectOptions] = useState<GenresState>([]);\n\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n\n  const handleRemoveSelectedOption = (id: number) => {\n    const filteredSelectedOptions = selectedOptions.filter(\n      (option) => option.id !== id\n    );\n    setSelectOptions(filteredSelectedOptions);\n    handleSelectOption(filteredSelectedOptions.map((option) => option.id));\n  };\n\n  return {\n    isOpenSelect,\n    selectedOptions,\n    handleOpenSelect,\n    handleRemoveSelectedOption,\n  };\n};\n\nexport { useSelectData };\n"]},"metadata":{},"sourceType":"module"}
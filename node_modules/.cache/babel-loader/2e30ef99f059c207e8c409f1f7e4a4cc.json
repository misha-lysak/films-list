{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { getFilms, getGenres } from '../../api';\n\nconst useHomeData = () => {\n  _s();\n\n  const [films, setFilms] = useState();\n  const [genres, setGenres] = useState([]);\n  const [queryParams, setQueryParams] = useState({\n    genresIds: '',\n    sortValue: '',\n    page: ''\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = ids => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = sortValue => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = page => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page\n  }) => {\n    var _genresIds$join;\n\n    const searchValues = { ...queryParams,\n      with_genres: (_genresIds$join = genresIds === null || genresIds === void 0 ? void 0 : genresIds.join(',')) !== null && _genresIds$join !== void 0 ? _genresIds$join : queryParams.genresIds,\n      sort_by: sortValue !== null && sortValue !== void 0 ? sortValue : queryParams.sortValue,\n      page: page !== null && page !== void 0 ? page : queryParams.page\n    };\n    setQueryParams(searchValues);\n    const queryParamsString = Object.entries(searchValues).map(query => {\n      return `&${query[0]}=${query[1]}`;\n    });\n    getFilms(queryParamsString === null || queryParamsString === void 0 ? void 0 : queryParamsString.join(''), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch\n  };\n};\n\n_s(useHomeData, \"2zhEvSi/CzL8BJJt3/x1ZuQMYXY=\");\n\nexport { useHomeData };","map":{"version":3,"sources":["/home/misha/projects/films-list/src/pages/home/home.hook.ts"],"names":["React","useState","getFilms","getGenres","useHomeData","films","setFilms","genres","setGenres","queryParams","setQueryParams","genresIds","sortValue","page","useEffect","handleSelectOption","ids","convertedIds","join","handleSort","handlePagination","Math","ceil","handleSearch","searchValues","with_genres","sort_by","queryParamsString","Object","entries","map","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,WAApC;;AAQA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAc,EAAd,CAApC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAE3C;AACDU,IAAAA,SAAS,EAAE,EADV;AAEDC,IAAAA,SAAS,EAAE,EAFV;AAGDC,IAAAA,IAAI,EAAE;AAHL,GAF2C,CAA9C;AAOAb,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBZ,IAAAA,QAAQ,CAAC,EAAD,EAAKI,QAAL,CAAR;AACD,GAFD,EAEG,EAFH;AAIAN,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBX,IAAAA,SAAS,CAAC,EAAD,EAAKK,SAAL,CAAT;AACD,GAFD,EAEG,EAFH;;AAIA,QAAMO,kBAAkB,GAAIC,GAAD,IAAmB;AAC5C,UAAMC,YAAY,GAAGD,GAAG,CAACE,IAAJ,CAAS,GAAT,CAArB;AACAhB,IAAAA,QAAQ,CAAE,gBAAee,YAAa,EAA9B,EAAiCX,QAAjC,CAAR;AACD,GAHD;;AAKA,QAAMa,UAAU,GAAIP,SAAD,IAAyB;AAC1CV,IAAAA,QAAQ,CAAE,YAAWU,SAAU,EAAvB,EAA0BN,QAA1B,CAAR;AACD,GAFD;;AAIA,QAAMc,gBAAgB,GAAIP,IAAD,IAAkB;AACzCX,IAAAA,QAAQ,CAAE,SAAQmB,IAAI,CAACC,IAAL,CAAUT,IAAI,GAAG,CAAjB,CAAoB,EAA9B,EAAiCP,QAAjC,CAAR;AACD,GAFD;;AAIA,QAAMiB,YAAY,GAAG,CAAC;AACpBZ,IAAAA,SADoB;AAEpBC,IAAAA,SAFoB;AAGpBC,IAAAA;AAHoB,GAAD,KAIQ;AAAA;;AAC3B,UAAMW,YAAY,GAAG,EACnB,GAAGf,WADgB;AAEnBgB,MAAAA,WAAW,qBAAEd,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEO,IAAX,CAAgB,GAAhB,CAAF,6DAA0BT,WAAW,CAACE,SAF9B;AAGnBe,MAAAA,OAAO,EAAEd,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeH,WAAW,CAACG,SAHf;AAInBC,MAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAUJ,WAAW,CAACI;AAJP,KAArB;AAOAH,IAAAA,cAAc,CAACc,YAAD,CAAd;AAEA,UAAMG,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeL,YAAf,EAA6BM,GAA7B,CAAkCC,KAAD,IAAW;AACpE,aAAQ,IAAGA,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAAhC;AACD,KAFyB,CAA1B;AAIA7B,IAAAA,QAAQ,CAACyB,iBAAD,aAACA,iBAAD,uBAACA,iBAAiB,CAAET,IAAnB,CAAwB,EAAxB,CAAD,EAA8BZ,QAA9B,CAAR;AACD,GAnBD;;AAqBA,SAAO;AACLD,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,MAHK;AAILC,IAAAA,SAJK;AAKLO,IAAAA,kBALK;AAMLI,IAAAA,UANK;AAOLC,IAAAA,gBAPK;AAQLG,IAAAA;AARK,GAAP;AAUD,CA9DD;;GAAMnB,W;;AAgEN,SAASA,WAAT","sourcesContent":["import React, { useState } from 'react';\nimport { getFilms, getGenres } from '../../api';\nimport {\n  FilmsResponse,\n  GenresState,\n  HandleSearchPropsType,\n  SortList,\n} from '../../types';\n\nconst useHomeData = () => {\n  const [films, setFilms] = useState<FilmsResponse>();\n  const [genres, setGenres] = useState<GenresState>([]);\n  const [queryParams, setQueryParams] = useState<{\n    [key: string]: string | number;\n  }>({\n    genresIds: '',\n    sortValue: '',\n    page: '',\n  });\n  React.useEffect(() => {\n    getFilms('', setFilms);\n  }, []);\n\n  React.useEffect(() => {\n    getGenres('', setGenres);\n  }, []);\n\n  const handleSelectOption = (ids: number[]) => {\n    const convertedIds = ids.join(',');\n    getFilms(`&with_genres=${convertedIds}`, setFilms);\n  };\n\n  const handleSort = (sortValue: SortList) => {\n    getFilms(`&sort_by=${sortValue}`, setFilms);\n  };\n\n  const handlePagination = (page: number) => {\n    getFilms(`&page=${Math.ceil(page / 2)}`, setFilms);\n  };\n\n  const handleSearch = ({\n    genresIds,\n    sortValue,\n    page,\n  }: HandleSearchPropsType) => {\n    const searchValues = {\n      ...queryParams,\n      with_genres: genresIds?.join(',') ?? queryParams.genresIds,\n      sort_by: sortValue ?? queryParams.sortValue,\n      page: page ?? queryParams.page,\n    };\n\n    setQueryParams(searchValues);\n\n    const queryParamsString = Object.entries(searchValues).map((query) => {\n      return `&${query[0]}=${query[1]}`;\n    });\n\n    getFilms(queryParamsString?.join(''), setFilms);\n  };\n\n  return {\n    films,\n    setFilms,\n    genres,\n    setGenres,\n    handleSelectOption,\n    handleSort,\n    handlePagination,\n    handleSearch,\n  };\n};\n\nexport { useHomeData };\n"]},"metadata":{},"sourceType":"module"}
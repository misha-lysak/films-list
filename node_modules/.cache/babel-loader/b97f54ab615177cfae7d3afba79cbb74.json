{"ast":null,"code":"var _jsxFileName = \"/home/misha/projects/films-list/src/components/select/select.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport './select.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Select = ({\n  handleSelectOption\n}) => {\n  _s();\n\n  var _selectedOptions$, _options;\n\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const color = useMemo(() => 'CFB8B4', [selectedOptions]);\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n  console.log({\n    selectedOptions\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selectWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select\",\n      children: [(selectedOptions === null || selectedOptions === void 0 ? void 0 : (_selectedOptions$ = selectedOptions[0]) === null || _selectedOptions$ === void 0 ? void 0 : _selectedOptions$.id) ? selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.map(({\n        id,\n        name\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: `#${color}49`\n          },\n          className: \"chosenOptionsWrapper\",\n          onClick: () => {\n            setSelectedOptions(prev => prev === null || prev === void 0 ? void 0 : prev.filter(option => option.id !== id));\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chosenOptionName\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deleteChosenOption\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"emptyValue\",\n        children: \"Choose some category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggleOpenSelect\",\n        onClick: () => handleOpenSelect(),\n        children: \"\\u27BE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), isOpenSelect && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"optionsWrapper\",\n      children: (_options = options) === null || _options === void 0 ? void 0 : _options.filter(option => !(selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.some(sOption => sOption.id === option.id))).map(({\n        id,\n        name\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleSelectOption(id);\n          setSelectedOptions(prev => [...prev, {\n            id,\n            name\n          }]);\n          handleOpenSelect();\n        },\n        className: \"option\",\n        children: name\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Select, \"at6Lq5MOrE3t5tgLExe7W0dZj+Y=\");\n\n_c = Select;\nexport const MemoSelect = /*#__PURE__*/React.memo(Select);\n_c2 = MemoSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Select\");\n$RefreshReg$(_c2, \"MemoSelect\");","map":{"version":3,"sources":["/home/misha/projects/films-list/src/components/select/select.tsx"],"names":["React","useCallback","useMemo","useState","Select","handleSelectOption","isOpenSelect","setIsOpenSelect","selectedOptions","setSelectedOptions","color","handleOpenSelect","console","log","id","map","name","backgroundColor","prev","filter","option","options","some","sOption","MemoSelect","memo"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { getGenres } from '../../api';\nimport { GenresState } from '../../app.types';\nimport './select.scss';\nimport { SelectProps } from './select.types';\n\nconst Select: FC<SelectProps> = ({ handleSelectOption }) => {\n  const [isOpenSelect, setIsOpenSelect] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState<GenresState>([]);\n  const color = useMemo(() => 'CFB8B4', [selectedOptions]);\n\n  const handleOpenSelect = useCallback(() => {\n    setIsOpenSelect(!isOpenSelect);\n  }, [isOpenSelect]);\n\n  console.log({ selectedOptions });\n\n  return (\n    <div className=\"selectWrapper\">\n      <div className=\"select\">\n        {selectedOptions?.[0]?.id ? (\n          selectedOptions?.map(({ id, name }) => {\n            return (\n              <div\n                key={id}\n                style={{ backgroundColor: `#${color}49` }}\n                className=\"chosenOptionsWrapper\"\n                onClick={() => {\n                  setSelectedOptions((prev) =>\n                    prev?.filter((option) => option.id !== id)\n                  );\n                }}\n              >\n                <span className=\"chosenOptionName\">{name}</span>\n                <div className=\"deleteChosenOption\">+</div>\n              </div>\n            );\n          })\n        ) : (\n          <p className=\"emptyValue\">Choose some category</p>\n        )}\n        <div className=\"toggleOpenSelect\" onClick={() => handleOpenSelect()}>\n          &#x27BE;\n        </div>\n      </div>\n      {isOpenSelect && (\n        <div className=\"optionsWrapper\">\n          {/* <div onClick={() => handleOpenSelect()} className=\"option\">\n            option\n          </div> */}\n          {options\n            ?.filter(\n              (option) =>\n                !selectedOptions?.some((sOption) => sOption.id === option.id)\n            )\n            .map(({ id, name }) => (\n              <div\n                key={id}\n                onClick={() => {\n                  handleSelectOption(id);\n                  setSelectedOptions((prev: { id: number; name: string }[]) => [\n                    ...prev,\n                    { id, name },\n                  ]);\n                  handleOpenSelect();\n                }}\n                className=\"option\"\n              >\n                {name}\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const MemoSelect = React.memo(Select);\n"]},"metadata":{},"sourceType":"module"}